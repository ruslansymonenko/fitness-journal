name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  test-server:
    name: Test Server
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fitness_journal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/fitness_journal_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./server/coverage
          flags: server
          name: server-coverage
          fail_ci_if_error: false

      - name: Build server
        run: npm run build

  test-client:
    name: Test & Build Client
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Build client
        run: npm run build

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Check server formatting
        working-directory: ./server
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json}"

      - name: Check client formatting
        working-directory: ./client
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}" --ignore-path .gitignore

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Audit server dependencies
        working-directory: ./server
        run: npm audit --audit-level moderate

      - name: Audit client dependencies
        working-directory: ./client
        run: npm audit --audit-level moderate

  # This job ensures all checks pass before allowing merge
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test-server, test-client, lint-and-format, security-audit]
    if: always()

    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.test-server.result }}" != "success" || 
                "${{ needs.test-client.result }}" != "success" || 
                "${{ needs.lint-and-format.result }}" != "success" || 
                "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"
